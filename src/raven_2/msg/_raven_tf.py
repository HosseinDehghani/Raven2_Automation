"""autogenerated by genmsg_py from raven_tf.msg. Do not edit."""
import roslib.message
import struct

import geometry_msgs.msg

class raven_tf(roslib.message.Message):
  _md5sum = "4bd7412860030e5d3bcd586190329e49"
  _type = "raven_2/raven_tf"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32[9] R
float32[3] P
geometry_msgs/Transform[3] tf_incr

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['R','P','tf_incr']
  _slot_types = ['float32[9]','float32[3]','geometry_msgs/Transform[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       R,P,tf_incr
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(raven_tf, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.R is None:
        self.R = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.P is None:
        self.P = [0.,0.,0.]
      if self.tf_incr is None:
        self.tf_incr = [geometry_msgs.msg.Transform(),geometry_msgs.msg.Transform(),geometry_msgs.msg.Transform()]
    else:
      self.R = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.P = [0.,0.,0.]
      self.tf_incr = [geometry_msgs.msg.Transform(),geometry_msgs.msg.Transform(),geometry_msgs.msg.Transform()]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_9f.pack(*self.R))
      buff.write(_struct_3f.pack(*self.P))
      for val1 in self.tf_incr:
        _v1 = val1.translation
        _x = _v1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v2 = val1.rotation
        _x = _v2
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 36
      self.R = _struct_9f.unpack(str[start:end])
      start = end
      end += 12
      self.P = _struct_3f.unpack(str[start:end])
      self.tf_incr = []
      for i in xrange(0, 3):
        val1 = geometry_msgs.msg.Transform()
        _v3 = val1.translation
        _x = _v3
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v4 = val1.rotation
        _x = _v4
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.tf_incr.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(self.R.tostring())
      buff.write(self.P.tostring())
      for val1 in self.tf_incr:
        _v5 = val1.translation
        _x = _v5
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v6 = val1.rotation
        _x = _v6
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 36
      self.R = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
      start = end
      end += 12
      self.P = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      self.tf_incr = []
      for i in xrange(0, 3):
        val1 = geometry_msgs.msg.Transform()
        _v7 = val1.translation
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v8 = val1.rotation
        _x = _v8
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.tf_incr.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_4d = struct.Struct("<4d")
_struct_3d = struct.Struct("<3d")
_struct_3f = struct.Struct("<3f")
_struct_9f = struct.Struct("<9f")
